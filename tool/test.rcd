string = [i1];

/* two line
   comment with indentation */
ztring = string;

/*
 * Properly boxed comment
 */
struct = 
{
	/* three line
		 badly spaced comment
	 with non trival indentation */ 
	str: string, 
	/* at predefined locations */ id : u4 
};

/* this returns something */
bar(elements :[struct]): i4 ;
 /* this is foo */ foo(/*number of names*/num: i4, /* namen*/name:[i1] );
nop();
set(v: i2);
now(): u8;
name(): [i1];
if = {name:[i1] , id:i4 ,corr:u4};
ifs(): [if];
s1 = {s:i1};
s2 = {a:i1};
s3 = {c:[s2]};
s4 = {e:[s3]};
stupid(s: s1): s4; 

/* session */
session < !echo(v:string); @echo(v:string)  >;

/* function */ 
getChannels(): [string];

acquistion 
<
	/*
	 * Properly boxed comment at nonzero base indent
	 */
	start(channel: string);
	
	/* forward call */
	!set(property: string, value: string);
	!get(property: string);
	
	/* callback */
	@onPropertyValue(property: string, value: string);
	
	@onData(data:[u1]);
>;

/* typedef */
HostId = u4;
NetifId = u4;
HostInfo = {hostId: HostId, names: [string]};

tdp
<
	start(queryId: u4): HostInfo;
	@onInterface(netifId: NetifId, ifNum: i4, names: [string]);
	@onPeer(hostId: HostId, v:string)
>;

